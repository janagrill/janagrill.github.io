<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Jana Grill</title><description>Software engineer üë©‚Äçüíª, Swift aficionado üèé, casual dancer üíÉ</description><link>https://janagrill.io</link><language>en</language><lastBuildDate>Fri, 18 Jun 2021 17:25:38 +0200</lastBuildDate><pubDate>Fri, 18 Jun 2021 17:25:38 +0200</pubDate><ttl>250</ttl><atom:link href="https://janagrill.io/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://janagrill.io/articles/ios15-navigation-bar-color</guid><title>Tinting navigation bars and tab bars in iOS 15</title><description>How to tint the navigation bar and the tab bar in iOS 15</description><link>https://janagrill.io/articles/ios15-navigation-bar-color</link><pubDate>Fri, 18 Jun 2021 17:02:00 +0200</pubDate><content:encoded><![CDATA[<h1>Tinting navigation bars and tab bars in iOS 15</h1><p>It was never really simple to set the background colour of <code>UINavigationBar</code> or <code>UITabBar</code>. The most common way is to set the colour on their appearance proxies at startup time, e.g. in <code>application(_:didFinishLaunchingWithOptions:)</code>.</p><pre><code><span class="type">UITabBar</span>.<span class="call">appearance</span>().<span class="property">barTintColor</span> = <span class="type">UIColor</span>.<span class="property">red</span>
<span class="type">UINavigationBar</span>.<span class="call">appearance</span>().<span class="property">barTintColor</span> = <span class="type">UIColor</span>.<span class="property">red</span>
</code></pre><p>Even with the arrival of SwiftUI this did not get any better. Even though there are "new" views <code>NavigationView</code> and <code>TabView</code>, they are backed up by <code>UINavigationBar</code> and <code>UITabBar</code> and there is no API to set their background colour, so you still need to set the colour on the appearance proxy.</p><p>However in iOS 15 this hack no longer works! You now have to use the <code>UIBarAppearance</code> introduced in iOS 13, and its subclasses <code>UINavigationBarAppearance</code> and <code>UITabBarAppearance</code>.</p><p>Here is an example for setting the background colour of the navigation bar.</p><pre><code><span class="keyword">let</span> navigationBarAppearance = <span class="type">UINavigationBarAppearance</span>()
navigationBarAppearance.<span class="call">configureWithOpaqueBackground</span>()
navigationBarAppearance.<span class="property">backgroundColor</span> = <span class="type">UIColor</span>.<span class="property">red</span>
<span class="type">UINavigationBar</span>.<span class="call">appearance</span>().<span class="property">standardAppearance</span> = navigationBarAppearance
<span class="type">UINavigationBar</span>.<span class="call">appearance</span>().<span class="property">scrollEdgeAppearance</span> = navigationBarAppearance
</code></pre><p>Let's hope Apple exposes a nice SwiftUI API to do this soon.</p><p><a href="https://developer.apple.com/forums/thread/682420">Source</a></p>]]></content:encoded></item><item><guid isPermaLink="true">https://janagrill.io/articles/404-publish-github-pages</guid><title>404 page with Publish and GitHub Pages</title><description>How to create a custom 404 page for your GitHub Pages website using John Sundell's Publish tool</description><link>https://janagrill.io/articles/404-publish-github-pages</link><pubDate>Thu, 24 Dec 2020 12:21:00 +0100</pubDate><content:encoded><![CDATA[<h1>404 page with Publish and GitHub Pages</h1><p>I have been meaning to try out <a href="https://twitter.com/johnsundell">John Sundell's</a> static site generator <a href="https://github.com/johnsundell/publish">Publish</a> for a while now and since holidays during coronavirus pandemic meant more free time than usual I decided to do it. For a Swift enthusiast as myself the tool was a joy to use and I ended up redoing the whole website using it. While most of the things I wanted to do were simple, it took me a bit of research and trial-and-error to figure out how to create my own 404 page.</p><p>My website is hosted on <a href="https://pages.github.com">GitHub Pages</a> and ultimately it is your hosting solution that prescribes how you should implement your 404 page. GitHub Pages offers a nice <a href="https://docs.github.com/en/free-pro-team@latest/github/working-with-github-pages/creating-a-custom-404-page-for-your-github-pages-site">documentation page</a> saying you should either have a 404.html or a 404.md page.</p><h2>First attempt - add 404.md</h2><p>I first tried simply adding a 404.md page under the Content folder to see what happens. After running <code>publish generate</code>, a new page <code>index.html</code> was generated in <code>Output/404</code>. This is, however, not what GitHub Pages expects. Accessing <code>your.website/404</code> does indeed show the custom page, however navigating to any other unsupported URL doesn't.</p><p>Another downside of this approach is that this way the 404 page gets added to your <code>sitemap.xml</code>, meaning search engines can use it to index your website, and it could turn up in the search, which is also not what you want for your 404 page.</p><p>I decided to try alternatives.</p><h2>Second attempt - copy generated 404 HTML</h2><p>My second idea was to add a custom step to publishing the website which will copy the generated 404 page to the output and name it as GitHub Pages expects.</p><pre><code><span class="keyword">try</span> <span class="type">Website</span>().<span class="call">publish</span>(
    ...
    additionalSteps: [
        ...
        .<span class="call">step</span>(named: <span class="string">"Copy 404 page"</span>) { context <span class="keyword">in
            try</span> context.<span class="call">copyFileToOutput</span>(from: <span class="string">"Output/404/index.html"</span>, 
                                         to: <span class="string">"Output/404.html"</span>)
        }
        ...
    ]
)
</code></pre><p>This approach also has two flaws. The first one is that it simply does not work, since at the time when this step is executed, the 404 page still hasn't been generated inside the <code>Output</code> folder.</p><p>This could probably be solved by listing all the publish steps manually and executing the copy step as the very last one, but the other flaw remains, namely the 404 page is still listed in <code>sitemap.xml</code>.</p><p>Therefore I quickly abandoned this approach as well.</p><h2>Third attempt - 404.html in Resources</h2><p>My final solution turned out to be really simple. I copied the HTML page generated by my first attempt, renamed it to <code>404.html</code> and moved it to the <code>Resources</code> folder. Everything that is in the <code>Resources</code> folder gets automatically copied to the <code>Output</code> folder on website generation. The advantage here is that my 404 page is no longer listed in <code>sitemap.xml</code> and, well, the obvious advantage is that this actually works for GitHub Pages üòÑ.</p><p>One downside is that my 404 page is pretty much hardcoded now and in order to change it I have to dig into the HTML and manually change that. This, however, does not pose a big issue as the page itself is actually pretty small and I do not expect to be changing this page that often anyways so this is what I ended up with.</p>]]></content:encoded></item></channel></rss>